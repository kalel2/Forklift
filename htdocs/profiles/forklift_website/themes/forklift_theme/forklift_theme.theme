<?php

/**
 * @file
 * Preprocess functions for Forklift theme.
 */

use Drupal\Core\Cache\CacheableMetadata;
use Drupal\node\NodeInterface;
use Drupal\node\Entity\Node;

/**
 * Prepares variables for the html.html.twig template.
 */
function forklift_theme_preprocess_html(&$variables) {
  try {
    $variables['is_front'] = \Drupal::service('path.matcher')->isFrontPage();
  }
  catch (Exception $e) {
    // If the database is not yet available, set default values for these
    // variables.
    $variables['is_front'] = FALSE;
  }

  // If we're on the front page.
  if (!$variables['is_front']) {
    // Add unique classes for each page and website section.
    $path = \Drupal::service('path.current')->getPath();
    $alias = \Drupal::service('path.alias_manager')->getAliasByPath($path);
    $alias = trim($alias, '/');
    $alias = str_replace('/', '-', $alias);
    if (!empty($alias)) {
      $variables['attributes']['class'][] = 'page-' . $alias;
      list($section,) = explode('/', $alias, 2);
      if (!empty($section)) {
        $variables['attributes']['class'][] = 'section-' . $section;
      }
    }
  }

  // Add cacheability metadata.
  $theme_name = \Drupal::theme()->getActiveTheme()->getName();
  $theme_settings = \Drupal::config($theme_name . '.settings');
  CacheableMetadata::createFromRenderArray($variables)
    ->addCacheableDependency($theme_settings)
    ->applyTo($variables);
  // Union all theme setting variables to the html.html.twig template.
  $variables += $theme_settings->getOriginal();
  $variables['head_title']['name'] = t('Forklift');

}

/**
 * Implements hook_preprocess().
 */
function forklift_theme_preprocess(&$variables, $hook) {

  $variables['base_path'] = base_path();
}

/**
 * Implements hook_preprocess_block().
 */
function forklift_theme_preprocess_block(&$variables) {
  $variables['content']['#attributes']['block'] = $variables['attributes']['id'];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function forklift_theme_theme_suggestions_menu_alter(array &$suggestions, array $variables) {
  // Remove the block and replace dashes with underscores in the block ID to
  // use for the hook name.
  if (isset($variables['attributes']['block'])) {
    $hook = str_replace(array('block-', '-'), array('', '_'), $variables['attributes']['block']);
    $suggestions[] = $variables['theme_hook_original'] . '__' . $hook;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function forklift_theme_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  // Add content type suggestions.
  // Revision page will return nid instead of node.
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    if (is_numeric($node)) {
      $node = Node::load($node);
    }

    if ($node instanceof NodeInterface) {
      array_splice($suggestions, 1, 0, 'page__' . $node->getType());
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function forklift_theme_theme_suggestions_page_title_alter(array &$suggestions, array $variables) {
  // Add content type suggestions.
  // Revision page will return nid instead of node.
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    if (is_numeric($node)) {
      $node = node_load($node);
    }

    if ($node instanceof NodeInterface) {
      $suggestions[] = $variables['theme_hook_original'] . '__' . $node->getType();
    }
  }
}
